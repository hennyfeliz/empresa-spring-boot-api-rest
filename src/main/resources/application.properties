
# Configuration for MySQL Database

server.port=8081
# server.contextPath=/api
spring.datasource.url = jdbc:mysql://localhost:3306/empresa?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false

spring.datasource.username=henny
spring.datasource.password=feferrefe2020
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

#Conexion por JNDI
#spring.datasource.jndi-name=

spring.jpa.properties.hibernate.format_sql=true
spring.datasource.dbcp2.validation-query=select 1 from dual
#Configuracion de log
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
logging.level.org.hibernate.SQL=WARN
logging.level.root=INFO

logging.file.name=Spring.log

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect